/*
Liquid flow rate sensor -DIYhacking.com Arvind Sanjeev

Measure the liquid/water flow rate using this code. 
Connect Vcc and Gnd of sensor to arduino, and the 
signal line to arduino digital pin 2.
 
 */

// Konfigurasi Data Logging --------------------
#include <EEPROMex.h>
#include "Arduino.h"
int address = 0;
long vol;

// ---------------------------------------------

// Konfigurasi LCD -----------------------------
#include <LiquidCrystal.h>
LiquidCrystal lcd(12, 11, 6, 5, 4, 3);

byte sensorInterrupt = 0;  // 0 = digital pin 2
byte sensorPin       = 2;

// The hall-effect flow sensor outputs approximately 4.5 pulses per second per
// litre/minute of flow.
float calibrationFactor = 4.5;
volatile byte pulseCount;  
float flowRate;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres;
long tM;
long tP;
unsigned long oldTime;
// ----------------------------------------------

// Konfigurasi Modem ----------------------------
#include <SoftwareSerial.h>
SoftwareSerial SIM900A(7,8);  // RX, TX
enum _parseState {
  PS_DETECT_MSG_TYPE,
  PS_IGNORING_COMMAND_ECHO,
  PS_HTTPACTION_TYPE,
  PS_HTTPACTION_RESULT,
  PS_HTTPACTION_LENGTH,
  PS_HTTPREAD_LENGTH,
  PS_HTTPREAD_CONTENT
};
byte parseState = PS_DETECT_MSG_TYPE;
char buffer[80];
byte pos = 0;
int contentLength = 0;
int rtc=0;
int timRTC=0;
char cVol[100];
void resetBuffer() {
  memset(buffer, 0, sizeof(buffer));
  pos = 0;
}
// ---------------------------------------------


void setup()
{
  
  SIM900A.begin(9600);   // Setting the baud rate of GSM Module    
  // Initialize a serial connection for reporting values to the host
  Serial.begin(9600);
   
  // Set up the status LED line as an output
  //pinMode(statusLed, OUTPUT);
  //digitalWrite(statusLed, HIGH);  // We have an active-low LED attached
  
  pinMode(sensorPin, INPUT);
  digitalWrite(sensorPin, HIGH);
  
  vol = EEPROM.readLong(address); 
  
  pulseCount        = 0;
  flowRate          = 0.0;
  flowMilliLitres   = 0;
  totalMilliLitres  = 0;
  tM                = 0;
  tP                = 0;
  oldTime           = 0;
  //vol               = 0.0;
  timRTC            = 30;

  Serial.print("Vol : ");
  Serial.println(vol); 
  
  // The Hall-effect sensor is connected to pin 2 which uses interrupt 0.
  // Configured to trigger on a FALLING state change (transition from HIGH
  // state to LOW state)
  attachInterrupt(sensorInterrupt, pulseCounter, FALLING);

  lcd.begin(8, 2);
  lcd.print("Vol(L): ");  
}

/**
 * Main program loop
 */
void loop()
{
   if((millis() - oldTime) > 1000)    // Only process counters once per second
  { 
    // Disable the interrupt while calculating flow rate and sending the value to
    // the host
    detachInterrupt(sensorInterrupt);
        
    // Because this loop may not complete in exactly 1 second intervals we calculate
    // the number of milliseconds that have passed since the last execution and use
    // that to scale the output. We also apply the calibrationFactor to scale the output
    // based on the number of pulses per second per units of measure (litres/minute in
    // this case) coming from the sensor.
    flowRate = ((1000.0 / (millis() - oldTime)) * pulseCount) / calibrationFactor;
    
    // Note the time this processing pass was executed. Note that because we've
    // disabled interrupts the millis() function won't actually be incrementing right
    // at this point, but it will still return the value it was set to just before
    // interrupts went away.
    oldTime = millis();
    rtc++;
    
    // Divide the flow rate in litres/minute by 60 to determine how many litres have
    // passed through the sensor in this 1 second interval, then multiply by 1000 to
    // convert to millilitres.
    flowMilliLitres = (flowRate / 60) * 1000;
    
    // Add the millilitres passed in this second to the cumulative total
    totalMilliLitres += flowMilliLitres;
    tM += totalMilliLitres;
    tM = tM/1000;  // Liter

    if(tM != tP)
    {
      vol = vol+tM;   
      EEPROM.writeLong(address, vol);   
      tP=tM;
    }
    
    unsigned int frac;
    
    // Print the flow rate for this second in litres / minute
    Serial.print("Debit Air: ");
    Serial.print(int(flowRate));  // Print the integer part of the variable
    Serial.print(".");             // Print the decimal point
    // Determine the fractional part. The 10 multiplier gives us 1 decimal place.
    frac = (flowRate - int(flowRate)) * 10;
    Serial.print(frac, DEC) ;      // Print the fractional part of the variable
    Serial.print("L/min");
    // Print the number of litres flowed in this second
    Serial.print("  Jumlah Liter Yang Masuk Saat Ini: ");             // Output separator
    Serial.print(flowMilliLitres);
    Serial.print("mL/Sec");

    // Print the cumulative total of litres flowed since starting
    Serial.print("  Total Liter Yang Masuk: ");             // Output separator
    Serial.print(vol); // totalMilliLitres
    Serial.println("L"); 

    lcd.setCursor(8, 0);
    lcd.print(vol);  
    // Reset the pulse counter so we can start incrementing again
    pulseCount = 0;
    
    // Enable the interrupt again now that we've finished sending output
    attachInterrupt(sensorInterrupt, pulseCounter, FALLING);
  }
  TimerRTC();
}

void TimerRTC()
{
  if(rtc==timRTC)
  {
   Serial.println("KIRIM DATA");   
   rtc=0;       
   GSMAccess(vol);   
  } 
}
/*
Insterrupt Service Routine
 */
void pulseCounter()
{
  // Increment the pulse counter
  pulseCount++;
}


void GSMAccess(long nVol)
{  
  SIM900A.println("AT+SAPBR=3,1,\"APN\",\"3Data\"");
  delay(1000);
  SIM900A.println("AT+SAPBR=3,1,\"USER\",\"3Data\"");
  delay(1000);
  SIM900A.println("AT+SAPBR=3,1,\"PWD\",\"3Data\"");  
  delay(1000);
  SIM900A.println("AT+SAPBR=1,1");
  delay(1000);
  SIM900A.println("AT+HTTPINIT");
  delay(1000);
  toSerial();
  
  SIM900A.println("AT+HTTPPARA=\"CID\",1");
  delay(1000);
  toSerial();   
  SIM900A.println("AT+HTTPPARA=\"URL\",\"http://rekalpa.com/tirton/API/01/send.php?a=TRJS-001&b=KL-001&c=KS-001&e=2016-11-14&f=13:15&g=BPM-001&h=PLG-001&token=31f9920feb81871255571790e524d7ec&d="+String(nVol)+"\"");    
  delay(1000);
  toSerial();
  
  SIM900A.println("AT+HTTPACTION=0");
  delay(1000);
  toSerial();

  // read server response
   SIM900A.println("AT+HTTPREAD"); 
   delay(1000);
   toSerial();

   SIM900A.println("");
   SIM900A.println("AT+HTTPTERM");
   toSerial();
   delay(300);

   SIM900A.println("");
   delay(1000);
}

void toSerial()
{
  while(SIM900A.available()!=0)
  {
    Serial.write(SIM900A.read());
  }
}
